[{"title":"第二十三课","url":"/posts/1303/","content":"## 多生产者-多消费者\n\n","categories":[],"tags":[]},{"title":"第二十二课","url":"/posts/2414/","content":"## 生产者消费者问题\n\n### 问题分析\n\n![](第二十二课/1.png)\n\n### 如何实现\n\n![](第二十二课/2.png)\n\n \n\n### 能否改变相邻P、V操作的顺序？\n\n![](第二十二课/3.png)\n\n### 知识回顾与重要考点\n\n![](第二十二课/4.png)","categories":[],"tags":[]},{"title":"第二十一课","url":"/posts/39188/","content":"## 用信号量实现进程同步、进程互斥\n\n### 信号量机制实现进程互斥\n\n![](第二十一课/1.png)\n\n### 信号量机制实现进程同步\n\n进程同步：要让各并发进程按要求有序地推进。\n\n![](第二十一课/2.png)\n\n![](第二十一课/3.png)\n\n### 信号量机制实现前驱关系\n\n![](第二十一课/4.png)\n\n![](第二十一课/5.png)","categories":[],"tags":[]},{"title":"第二十课","url":"/posts/49118/","content":"## 信号量机制\n\n![](第二十课/1.PNG)\n\nwait、signal原语通常简称为P、V操作\n\n![](第二十课/2.PNG)\n\n整型信号量\n\n![](第二十课/3.PNG)\n\n!![](第二十课/4.png)\n\n![](第二十课/5-1590836394711.png)\n\n![6](第二十课/6.png)\n\n![7](第二十课/7.png)","categories":[],"tags":[]},{"title":"第十九课","url":"/posts/39162/","content":"## 进程互斥的硬件实现方法","categories":[],"tags":[]},{"title":"第十八课","url":"/posts/50340/","content":"## 进程互斥的软件实现方法","categories":[],"tags":[]},{"title":"第十七课","url":"/posts/28865/","content":"## 进程同步 进程互斥\n\n### 什么是进程同步\n\n进程具有异步性的特征。异步性是指，各并发执行的进程以各自独立的、不可预知的速度向前推进。![](第十七课/1.PNG)\n\n### 什么是进程互斥\n\n![](第十七课/2.PNG)\n\n![](第十七课/3.PNG)\n\n![](第十七课/4.PNG)\n\n![](第十七课/5.PNG)","categories":[],"tags":[]},{"title":"第十六课","url":"/posts/19620/","content":"## 调度算法\n\n![](第十六课/1.png)\n\n### 时间片轮转（RR）\n\n#### 时间片为2\n\n![](第十六课/2.png)\n\n![3](第十六课/3.png)\n\n![4](第十六课/4.PNG)\n\n#### 时间片为5\n\n![](第十六课/5.png)\n\n![6](第十六课/6.png)\n\n![](第十六课/7.PNG)\n\n![](第十六课/8.png)\n\n![](第十六课/9.png)\n\n![](第十六课/10.PNG)\n\n![](第十六课/11.png)\n\n### 优先级调度算法\n\n![](第十六课/12.PNG)\n\n![](第十六课/16.PNG)\n\n![](第十六课/13.PNG)\n\n![14](第十六课/14.PNG)\n\n![15](第十六课/15.PNG)\n\n### 多级反馈队列调度算法\n\n![](第十六课/17.PNG)\n\n![](第十六课/18.PNG)\n\n![](第十六课/19.PNG)","categories":[],"tags":[]},{"title":"第十五课","url":"/posts/1213/","content":"## FCFS、SJF、HRRN调度算法\n\n![](第十五课/1.PNG)\n\n### 先来先服务（FCFS）\n\n周转时间=完成时间-到达时间 \n\n带权周转时间=周转时间/运行时间\n\n等待时间=周转时间-运行时间\n\n![](第十五课/2.PNG)\n\n![](第十五课/3.PNG)\n\n![](第十五课/4.PNG)\n\n### 短作业优先（SJF）-------非抢占式\n\n![](第十五课/5.PNG)\n\n### 短作业优先（SJF）-------抢占式\n\n![](第十五课/6.PNG)\n\n![](第十五课/8.PNG)\n\n### 高响应比优先（HRRN）\n\n![](第十五课/9.png)\n\n![](第十五课/10.png)\n\n![](第十五课/11.png)\n\nhttps://yuhuijiu.oss-cn-beijing.aliyuncs.com/img/4b961df23394fd72994a03f58f9c516f.png","categories":[],"tags":[]},{"title":"第十四课","url":"/posts/50691/","content":"## 调度算法的评价指标\n\n### cpu利用率\n\n![](第十四课/1.png)\n\n### 系统吞吐量\n\n![](第十四课/2.png)\n\n### 周转时间\n\n![](第十四课/3.png)\n\n![](第十四课/4.png)\n\n### 等待时间\n\n![](第十四课/5.png)\n\n### 响应时间\n\n![](第十四课/6.png)\n\n![](第十四课/7.png)","categories":[],"tags":[]},{"title":"第十三课","url":"/posts/43202/","content":"## 进程调度的时机切换与过程调度方式\n\n### 进程调度的时机\n\n![](第十三课/1.png)\n\n  进程在操作系统内核程序临界区中不能进行调度与切换\n  临界资源：一个时间段内只允许一个进程使用的资源。各进程需要互斥的访问临界资源。\n  临界区：访问临界资源的那段代码\n\n![](第十三课/2.png)\n\n### 进程调度的方式\n\n![](第十三课/3.png)\n\n![4](第十三课/4.png)\n\n### 进程的切换与过程\n\n![](第十三课/5.png)\n\n![](第十三课/6.png)\n\n![](第十三课/7.png)","categories":[],"tags":[]},{"title":"第十二课","url":"/posts/42171/","content":"## 处理机调度的概念与层次\n\n### 调度的基本概念\n\n***当有一堆人物要处理，但由于资源有限，这些事情没法同时处理。这就需要确定某种规则来决定处理这些人物的顺序，这就是“调度”研究的问题。\n\n***在多道程序系统中，进程的数量往往多于处理机的个数的，这样不可能同时并行地处理各个进程。处理机调度，就是从就绪队列中按照一定的算法选择一个进程并将处理机分配给它运行，以实现进程的并发执行\n\n#### 高级调度\n\n![](第十二课/1.PNG)\n\n### 中级调度\n\n![](第十二课/2.PNG)\n\n![](第十二课/3.PNG)\n\n### 低级调度\n\n低级调度(进程调度)，其主要任务是按照某种方法和策略从就绪队列中选取一个进程，将处理机分配给它。\n\n进程调度是操作系统中最基本的一种调度，在一般的操作系统中都必须配置进程调度。\n\n进程调度的频率很高，一般几十毫秒一次。\n\n![](第十二课/4.PNG)\n\n![5](第十二课/5.PNG)","categories":[],"tags":[]},{"title":"第十一课","url":"/posts/13505/","content":"> 线程、多线程模型**\n> <!-- more -->\n>\n> 什么是线程，为什么要引入线程？\n> 传统的进程是程序执行流的最小单位，但是引入线程后，线程成为了程序执行流的最小单位。线程是一个基本的CPU执行单元，也是程序执行流的最小单位。引入线程后，不仅是进程之间可以并发，进程内的各线程之间也可以并发，从而提高了系统的并发度，使得一个进程内也可以并发处理各种任务。引入线程后，进程只作为除CPU之外的系统资源的分配单元。\n>   \n>   \n\n​              引入线程机制后，有什么变化？\n\n![1](第十一课/1.PNG)\n\n![](第十一课/2.PNG)\n\n![](第十一课/3.PNG)\n\n![4](第十一课/4.PNG)\n\n![5](第十一课/5.PNG)\n\n**重点重点重点:**\n操作系统只\"看得见\"内核级线程，因此只有内核级线程才是处理机分配的单位\n\n### **多线程模型**\n\n![](第十一课/6.PNG)\n\n![](第十一课/7.PNG)\n\n![](第十一课/8.PNG)","categories":[],"tags":[]},{"title":"第十课","url":"/posts/29158/","content":"\n进程通信\n<!-- more -->\n![1](第十课/1.PNG)\n进程通信是指进程之间的信息交换\n进程就是分配系统资源的单位（包括内存地址空间），因此各进程拥有的内存地址空间相互独立。\n为了保证安全，一个进程不能直接访问另一个进程的地址空间。\n![2](第十课/2.PNG)\n![](第十课/3.PNG)\n<u>**消息传递**</u>\n进程间的数据交换以格式化的消息为单位，进程通过操作系统提供的“发送消息/接受消息”两个原语进行数据交换。\n\n![](第十课/4.PNG)\n\n![](第十课/5.PNG)\n","categories":[],"tags":[]},{"title":"第九课","url":"/posts/62545/","content":"**进程控制**\n<!-- more -->\n\n![1](第九课/1.PNG)\n\n![2](第九课/2.PNG)\n\n![3](第九课/3.PNG)\n\n![4](第九课/4.PNG)\n\n![5](第九课/5.PNG)\n\n![6](第九课/6.PNG)\n\n![7](第九课/7.PNG)\n\n![8](第九课/8.PNG)","categories":[],"tags":[]},{"title":"第八课","url":"/posts/43023/","content":"进程的状态与转换\n<!-- more -->\n\n![1](第八课/1.PNG)\n\n![2](第八课/2.PNG)\n\n![3](第八课/3.PNG)\n\n![4](第八课/4.PNG)\n\n![5](第八课/5.PNG)\n\n\n","categories":[],"tags":[]},{"title":"第七课","url":"/posts/7274/","content":"进程\n\n<!-- more -->\n\n![1](第七课/1.jpg)\n\n![2](第七课/2.jpg)\n\n![3](第七课/3.jpg)\n\n![4](第七课/4.jpg)\n\n![5](第七课/5.jpg)\n\n![6](第七课/6.jpg)\n\n![7](第七课/7.jpg)\n\n![8](第七课/8.jpg)\n\n![9](第七课/9.jpg)\n\n![10](第七课/10.jpg)\n\n![11](第七课/11.jpg)","categories":[],"tags":[]},{"title":"第六课","url":"/posts/8207/","content":"YHJ\n\n<!-- more -->\n\n![1](第六课/1.jpg)\n\n![2](第六课/2.jpg)\n\n![3](第六课/3.jpg)\n\n![4](第六课/4.jpg)\n\n![5](第六课/5.jpg)\n\n![6](第六课/6.jpg)","categories":[],"tags":[]},{"title":"第五课","url":"/posts/26646/","content":"中断和异常\n\n<!-- more -->\n\n![1](第五课/1.jpg)\n\n![2](第五课/2.jpg)\n\n![3](第五课/3.jpg)\n\n![4](第五课/4.jpg)\n\n![5](第五课/5.jpg)\n\n![6](第五课/6.jpg)\n\n![7](第五课/7.jpg)\n\n![8](第五课/8.jpg)","categories":[],"tags":[]},{"title":"第四课","url":"/posts/43688/","content":"  操作系统的运行机制和体系结构\n\n<!-- more -->  \n\n ![1](第四课/1-1590139761909.PNG)\n\n 指令就是处理器（cpu）能识别、执行的最基本命令\n\n  ![3](第四课/3.PNG)\n\n  两种处理器状态\n![2](第四课/2.PNG)\n\n![4](第四课/4.PNG)\n\n![5](第四课/5.PNG)\n内核是计算机配置的底层软件，是操作系统最基本、最核心的部分\n实现操作系统内核功能的那些程序就是内核程序。\n![6](第四课/6.jpg)\n\n![7](第四课/7.jpg)\n\n\n\n![8](第四课/8.jpg)\n\n\n\n![9](第四课/9.jpg)","categories":[],"tags":[]},{"title":"第三课","url":"/posts/50281/","content":"没经历我的磨难，就别劝我善良\n<!-- more -->\n![1](第三课/1.PNG)\n手工操作阶段\n\t\t主要缺点:用户独占全机，人机速度矛盾导致资源率极低\n单道批处理系统:引入脱机输入/输出技术(用磁带完成),并监督程序负责控制作业的输入输出\n\t主要优点:缓解了一定程度的人机速度矛盾，资源利用率有所提升。\n\t\t主要缺点:内存中仅有一道程序运行，只有该程序运行结束之后才能调入下一道程序。CPU有大量的时间是在空闲I/O完成。资源利用率依然很低。\n多道批处理系统:\n\t主要优点:多道程序并发执行，共享计算机资源，资源利用率大幅提升，CPU和其它资源保持忙碌状态，系统吞吐量增大。\n\t主要缺点: 用户响应时间长，没有人机交互功能（用户提交自己的作业之后就只能等待计算机处理完成，中间不能控制自己的作业执行）\n分时操作系统 :计算机以时间片为单位轮流为各个用户/作业服务，各个用户可通过终端与计算机进行交互。\n\t主要优点: 用户请求可以被及时响应，解决了人机交互问题。允许多个用户同时使用一台计算机，并且用户对计算机的操作相互独立，感受不到别人的存在\n\t主要缺点：不能优先处理一些紧急任务。操作系统对各个用户/作业都是完全公平的，循环的为每个用户/作业服务一个时间片，不区分任务的紧急性。\n实时操作系统：\n\t主要优点:能够优先响应一些紧急任务，某些紧急任务 不需时间片排队。\n\t在实时操作系统的控制下，计算机系统收到外部信号后及时进行处理，并且要在严格的时限内处理完事件。实时操作系统的主要特点是及时性和可靠性\n\n![2](第三课/2.PNG)\n![3](第三课/3-1589727606879.PNG)\n\n![4](第三课/4.PNG)","categories":[],"tags":[]},{"title":"第二课","url":"/posts/51216/","content":"时光荏苒，旦夕之间，略有遗憾，似白驹过隙，蹉跎自悟。\n<!-- more -->\n![1](第二课/1.PNG)\n\n并发:指两个或多个事件在同一时间间隔内发生。这些事件宏观上是同时发生的，但微观上是交替发生的。\n\n并行:指两个或多个事件在同一时刻同时发生。\n\n共享即资源共享，是指系统中的资源可供内存中多个并发执行的进程共同使用\n\n![2](第二课/2.PNG)\n\n并发和共享互为存在条件\n\n虚拟:指一个物理上的实体变为若干个逻辑上的对应物。物理实体是实际存在的，而逻辑上对应物是用户感受到的\n\n虚拟存储器，空分复用技术\n\n异步:指在多道程序环境下，允许多个程序并发执行，但由于资源有限，进程的执行不是一贯到底的，而是走走停停，以不可预知的速度向前推进，这就是进程的异步性。\n\n![3](第二课/3.PNG)\n\n","categories":[],"tags":[]},{"title":"第一课","url":"/posts/22634/","content":"​                               操作系统的概念\n\n   操作系统是指控制和管理整个计算机系统的硬件和软件资源，并合理的组织调度计算机的工作和资源的分配，\n   以提供给用户和其他软件方便的接口和环境，它是计算机系统中最基本的系统软件。\n\n<!-- more -->\n![1](第一课/1.PNG)\n\n​                         操作系统的功能和目标\n进程是一个程序的执行过程。执行前需要将该程序放到内存中，才能被cpu处理。\n\n![2](第一课/2.PNG)\n\n![3](第一课/3.PNG)\n\n![4](第一课/4.PNG)\n\n![5](第一课/5.PNG)\n广义指令=系统调用命令=广义指令\n![6](第一课/6.PNG)\n![7](第一课/7.PNG)","categories":[],"tags":[]}]