<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>忘川</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-05-26T10:50:59.874Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>YHJ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>88888</title>
    <link href="http://yoursite.com/2020/05/27/88888/"/>
    <id>http://yoursite.com/2020/05/27/88888/</id>
    <published>2020-05-27T07:26:16.605Z</published>
    <updated>2020-05-26T10:50:59.874Z</updated>
    
    <content type="html"><![CDATA[<p>​                               操作系统的概念</p><p>   操作系统是指控制和管理整个计算机系统的硬件和软件资源，并合理的组织调度计算机的工作和资源的分配，<br>   以提供给用户和其他软件方便的接口和环境，它是计算机系统中最基本的系统软件。</p><a id="more"></a><p><img src="/2020/05/27/88888/1.PNG" alt="1"></p><p>​                         操作系统的功能和目标<br>进程是一个程序的执行过程。执行前需要将该程序放到内存中，才能被cpu处理。</p><p><img src="/2020/05/27/88888/2.PNG" alt="2"></p><p><img src="/2020/05/27/88888/3.PNG" alt="3"></p><p><img src="/2020/05/27/88888/4.PNG" alt="4"></p><p><img src="/2020/05/27/88888/5.PNG" alt="5"><br>广义指令=系统调用命令=广义指令<br><img src="/2020/05/27/88888/6.PNG" alt="6"><br><img src="/2020/05/27/88888/7.PNG" alt="7"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​                               操作系统的概念&lt;/p&gt;
&lt;p&gt;   操作系统是指控制和管理整个计算机系统的硬件和软件资源，并合理的组织调度计算机的工作和资源的分配，&lt;br&gt;   以提供给用户和其他软件方便的接口和环境，它是计算机系统中最基本的系统软件。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>第十五课</title>
    <link href="http://yoursite.com/2020/05/26/%E7%AC%AC%E5%8D%81%E4%BA%94%E8%AF%BE/"/>
    <id>http://yoursite.com/2020/05/26/%E7%AC%AC%E5%8D%81%E4%BA%94%E8%AF%BE/</id>
    <published>2020-05-26T15:23:13.497Z</published>
    <updated>2020-05-27T02:54:17.536Z</updated>
    
    <content type="html"><![CDATA[<h2 id="FCFS、SJF、HRRN调度算法"><a href="#FCFS、SJF、HRRN调度算法" class="headerlink" title="FCFS、SJF、HRRN调度算法"></a>FCFS、SJF、HRRN调度算法</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;FCFS、SJF、HRRN调度算法&quot;&gt;&lt;a href=&quot;#FCFS、SJF、HRRN调度算法&quot; class=&quot;headerlink&quot; title=&quot;FCFS、SJF、HRRN调度算法&quot;&gt;&lt;/a&gt;FCFS、SJF、HRRN调度算法&lt;/h2&gt;&lt;script&gt;
    
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>第十四课</title>
    <link href="http://yoursite.com/2020/05/26/%E7%AC%AC%E5%8D%81%E5%9B%9B%E8%AF%BE/"/>
    <id>http://yoursite.com/2020/05/26/%E7%AC%AC%E5%8D%81%E5%9B%9B%E8%AF%BE/</id>
    <published>2020-05-26T15:04:29.998Z</published>
    <updated>2020-05-27T02:54:17.536Z</updated>
    
    <content type="html"><![CDATA[<h2 id="调度算法的评价指标"><a href="#调度算法的评价指标" class="headerlink" title="调度算法的评价指标"></a>调度算法的评价指标</h2><h3 id="cpu利用率"><a href="#cpu利用率" class="headerlink" title="cpu利用率"></a>cpu利用率</h3><p><img src="/2020/05/26/%E7%AC%AC%E5%8D%81%E5%9B%9B%E8%AF%BE/1.png" alt=""></p><h3 id="系统吞吐量"><a href="#系统吞吐量" class="headerlink" title="系统吞吐量"></a>系统吞吐量</h3><p><img src="/2020/05/26/%E7%AC%AC%E5%8D%81%E5%9B%9B%E8%AF%BE/2.png" alt=""></p><h3 id="周转时间"><a href="#周转时间" class="headerlink" title="周转时间"></a>周转时间</h3><p><img src="/2020/05/26/%E7%AC%AC%E5%8D%81%E5%9B%9B%E8%AF%BE/3.png" alt=""></p><p><img src="/2020/05/26/%E7%AC%AC%E5%8D%81%E5%9B%9B%E8%AF%BE/4.png" alt=""></p><h3 id="等待时间"><a href="#等待时间" class="headerlink" title="等待时间"></a>等待时间</h3><p><img src="/2020/05/26/%E7%AC%AC%E5%8D%81%E5%9B%9B%E8%AF%BE/5.png" alt=""></p><h3 id="响应时间"><a href="#响应时间" class="headerlink" title="响应时间"></a>响应时间</h3><p><img src="/2020/05/26/%E7%AC%AC%E5%8D%81%E5%9B%9B%E8%AF%BE/6.png" alt=""></p><p><img src="/2020/05/26/%E7%AC%AC%E5%8D%81%E5%9B%9B%E8%AF%BE/7.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;调度算法的评价指标&quot;&gt;&lt;a href=&quot;#调度算法的评价指标&quot; class=&quot;headerlink&quot; title=&quot;调度算法的评价指标&quot;&gt;&lt;/a&gt;调度算法的评价指标&lt;/h2&gt;&lt;h3 id=&quot;cpu利用率&quot;&gt;&lt;a href=&quot;#cpu利用率&quot; class=&quot;head
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>第十三课</title>
    <link href="http://yoursite.com/2020/05/26/%E7%AC%AC%E5%8D%81%E4%B8%89%E8%AF%BE/"/>
    <id>http://yoursite.com/2020/05/26/%E7%AC%AC%E5%8D%81%E4%B8%89%E8%AF%BE/</id>
    <published>2020-05-26T14:35:07.986Z</published>
    <updated>2020-05-27T02:54:17.525Z</updated>
    
    <content type="html"><![CDATA[<h2 id="进程调度的时机切换与过程调度方式"><a href="#进程调度的时机切换与过程调度方式" class="headerlink" title="进程调度的时机切换与过程调度方式"></a>进程调度的时机切换与过程调度方式</h2><h3 id="进程调度的时机"><a href="#进程调度的时机" class="headerlink" title="进程调度的时机"></a>进程调度的时机</h3><p><img src="/2020/05/26/%E7%AC%AC%E5%8D%81%E4%B8%89%E8%AF%BE/1.png" alt=""></p><p>  进程在操作系统内核程序临界区中不能进行调度与切换<br>  临界资源：一个时间段内只允许一个进程使用的资源。各进程需要互斥的访问临界资源。<br>  临界区：访问临界资源的那段代码</p><p><img src="/2020/05/26/%E7%AC%AC%E5%8D%81%E4%B8%89%E8%AF%BE/2.png" alt=""></p><h3 id="进程调度的方式"><a href="#进程调度的方式" class="headerlink" title="进程调度的方式"></a>进程调度的方式</h3><p><img src="/2020/05/26/%E7%AC%AC%E5%8D%81%E4%B8%89%E8%AF%BE/3.png" alt=""></p><p><img src="/2020/05/26/%E7%AC%AC%E5%8D%81%E4%B8%89%E8%AF%BE/4.png" alt="4"></p><h3 id="进程的切换与过程"><a href="#进程的切换与过程" class="headerlink" title="进程的切换与过程"></a>进程的切换与过程</h3><p><img src="/2020/05/26/%E7%AC%AC%E5%8D%81%E4%B8%89%E8%AF%BE/5.png" alt=""></p><p><img src="/2020/05/26/%E7%AC%AC%E5%8D%81%E4%B8%89%E8%AF%BE/6.png" alt=""></p><p><img src="/2020/05/26/%E7%AC%AC%E5%8D%81%E4%B8%89%E8%AF%BE/7.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;进程调度的时机切换与过程调度方式&quot;&gt;&lt;a href=&quot;#进程调度的时机切换与过程调度方式&quot; class=&quot;headerlink&quot; title=&quot;进程调度的时机切换与过程调度方式&quot;&gt;&lt;/a&gt;进程调度的时机切换与过程调度方式&lt;/h2&gt;&lt;h3 id=&quot;进程调度的时机&quot;&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>第十二课</title>
    <link href="http://yoursite.com/2020/05/26/%E7%AC%AC%E5%8D%81%E4%BA%8C%E8%AF%BE/"/>
    <id>http://yoursite.com/2020/05/26/%E7%AC%AC%E5%8D%81%E4%BA%8C%E8%AF%BE/</id>
    <published>2020-05-26T12:54:07.683Z</published>
    <updated>2020-05-27T02:54:17.536Z</updated>
    
    <content type="html"><![CDATA[<h2 id="处理机调度的概念与层次"><a href="#处理机调度的概念与层次" class="headerlink" title="处理机调度的概念与层次"></a>处理机调度的概念与层次</h2><h3 id="调度的基本概念"><a href="#调度的基本概念" class="headerlink" title="调度的基本概念"></a>调度的基本概念</h3><p>***当有一堆人物要处理，但由于资源有限，这些事情没法同时处理。这就需要确定某种规则来决定处理这些人物的顺序，这就是“调度”研究的问题。</p><p>***在多道程序系统中，进程的数量往往多于处理机的个数的，这样不可能同时并行地处理各个进程。处理机调度，就是从就绪队列中按照一定的算法选择一个进程并将处理机分配给它运行，以实现进程的并发执行</p><h4 id="高级调度"><a href="#高级调度" class="headerlink" title="高级调度"></a>高级调度</h4><p><img src="/2020/05/26/%E7%AC%AC%E5%8D%81%E4%BA%8C%E8%AF%BE/1.PNG" alt=""></p><h3 id="中级调度"><a href="#中级调度" class="headerlink" title="中级调度"></a>中级调度</h3><p><img src="/2020/05/26/%E7%AC%AC%E5%8D%81%E4%BA%8C%E8%AF%BE/2.PNG" alt=""></p><p><img src="/2020/05/26/%E7%AC%AC%E5%8D%81%E4%BA%8C%E8%AF%BE/3.PNG" alt=""></p><h3 id="低级调度"><a href="#低级调度" class="headerlink" title="低级调度"></a>低级调度</h3><p>低级调度(进程调度)，其主要任务是按照某种方法和策略从就绪队列中选取一个进程，将处理机分配给它。</p><p>进程调度是操作系统中最基本的一种调度，在一般的操作系统中都必须配置进程调度。</p><p>进程调度的频率很高，一般几十毫秒一次。</p><p><img src="/2020/05/26/%E7%AC%AC%E5%8D%81%E4%BA%8C%E8%AF%BE/4.PNG" alt=""></p><p><img src="/2020/05/26/%E7%AC%AC%E5%8D%81%E4%BA%8C%E8%AF%BE/5.PNG" alt="5"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;处理机调度的概念与层次&quot;&gt;&lt;a href=&quot;#处理机调度的概念与层次&quot; class=&quot;headerlink&quot; title=&quot;处理机调度的概念与层次&quot;&gt;&lt;/a&gt;处理机调度的概念与层次&lt;/h2&gt;&lt;h3 id=&quot;调度的基本概念&quot;&gt;&lt;a href=&quot;#调度的基本概念&quot; c
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>第十一课</title>
    <link href="http://yoursite.com/2020/05/24/%E7%AC%AC%E5%8D%81%E4%B8%80%E8%AF%BE/"/>
    <id>http://yoursite.com/2020/05/24/%E7%AC%AC%E5%8D%81%E4%B8%80%E8%AF%BE/</id>
    <published>2020-05-24T13:42:26.563Z</published>
    <updated>2020-05-26T12:53:13.105Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>线程、多线程模型**</p><a id="more"></a><p>什么是线程，为什么要引入线程？<br>传统的进程是程序执行流的最小单位，但是引入线程后，线程成为了程序执行流的最小单位。线程是一个基本的CPU执行单元，也是程序执行流的最小单位。引入线程后，不仅是进程之间可以并发，进程内的各线程之间也可以并发，从而提高了系统的并发度，使得一个进程内也可以并发处理各种任务。引入线程后，进程只作为除CPU之外的系统资源的分配单元。</p></blockquote><p>​              引入线程机制后，有什么变化？</p><p><img src="/2020/05/24/%E7%AC%AC%E5%8D%81%E4%B8%80%E8%AF%BE/1.PNG" alt="1"></p><p><img src="/2020/05/24/%E7%AC%AC%E5%8D%81%E4%B8%80%E8%AF%BE/2.PNG" alt=""></p><p><img src="/2020/05/24/%E7%AC%AC%E5%8D%81%E4%B8%80%E8%AF%BE/3.PNG" alt=""></p><p><img src="/2020/05/24/%E7%AC%AC%E5%8D%81%E4%B8%80%E8%AF%BE/4.PNG" alt="4"></p><p><img src="/2020/05/24/%E7%AC%AC%E5%8D%81%E4%B8%80%E8%AF%BE/5.PNG" alt="5"></p><p><strong>重点重点重点:</strong><br>操作系统只”看得见”内核级线程，因此只有内核级线程才是处理机分配的单位</p><h3 id="多线程模型"><a href="#多线程模型" class="headerlink" title="多线程模型"></a><strong>多线程模型</strong></h3><p><img src="/2020/05/24/%E7%AC%AC%E5%8D%81%E4%B8%80%E8%AF%BE/6.PNG" alt=""></p><p><img src="/2020/05/24/%E7%AC%AC%E5%8D%81%E4%B8%80%E8%AF%BE/7.PNG" alt=""></p><p><img src="/2020/05/24/%E7%AC%AC%E5%8D%81%E4%B8%80%E8%AF%BE/8.PNG" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;线程、多线程模型**&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>第十课</title>
    <link href="http://yoursite.com/2020/05/22/%E7%AC%AC%E5%8D%81%E8%AF%BE/"/>
    <id>http://yoursite.com/2020/05/22/%E7%AC%AC%E5%8D%81%E8%AF%BE/</id>
    <published>2020-05-22T09:54:38.924Z</published>
    <updated>2020-05-24T13:12:59.068Z</updated>
    
    <content type="html"><![CDATA[<p>进程通信</p><a id="more"></a><p><img src="/2020/05/22/%E7%AC%AC%E5%8D%81%E8%AF%BE/1.PNG" alt="1"><br>进程通信是指进程之间的信息交换<br>进程就是分配系统资源的单位（包括内存地址空间），因此各进程拥有的内存地址空间相互独立。<br>为了保证安全，一个进程不能直接访问另一个进程的地址空间。<br><img src="/2020/05/22/%E7%AC%AC%E5%8D%81%E8%AF%BE/2.PNG" alt="2"><br><img src="/2020/05/22/%E7%AC%AC%E5%8D%81%E8%AF%BE/3.PNG" alt=""><br><u><strong>消息传递</strong></u><br>进程间的数据交换以格式化的消息为单位，进程通过操作系统提供的“发送消息/接受消息”两个原语进行数据交换。</p><p><img src="/2020/05/22/%E7%AC%AC%E5%8D%81%E8%AF%BE/4.PNG" alt=""></p><p><img src="/2020/05/22/%E7%AC%AC%E5%8D%81%E8%AF%BE/5.PNG" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;进程通信&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>第九课</title>
    <link href="http://yoursite.com/2020/05/22/%E7%AC%AC%E4%B9%9D%E8%AF%BE/"/>
    <id>http://yoursite.com/2020/05/22/%E7%AC%AC%E4%B9%9D%E8%AF%BE/</id>
    <published>2020-05-22T09:14:38.201Z</published>
    <updated>2020-05-22T09:52:59.510Z</updated>
    
    <content type="html"><![CDATA[<p><strong>进程控制</strong></p><a id="more"></a><p><img src="/2020/05/22/%E7%AC%AC%E4%B9%9D%E8%AF%BE/1.PNG" alt="1"></p><p><img src="/2020/05/22/%E7%AC%AC%E4%B9%9D%E8%AF%BE/2.PNG" alt="2"></p><p><img src="/2020/05/22/%E7%AC%AC%E4%B9%9D%E8%AF%BE/3.PNG" alt="3"></p><p><img src="/2020/05/22/%E7%AC%AC%E4%B9%9D%E8%AF%BE/4.PNG" alt="4"></p><p><img src="/2020/05/22/%E7%AC%AC%E4%B9%9D%E8%AF%BE/5.PNG" alt="5"></p><p><img src="/2020/05/22/%E7%AC%AC%E4%B9%9D%E8%AF%BE/6.PNG" alt="6"></p><p><img src="/2020/05/22/%E7%AC%AC%E4%B9%9D%E8%AF%BE/7.PNG" alt="7"></p><p><img src="/2020/05/22/%E7%AC%AC%E4%B9%9D%E8%AF%BE/8.PNG" alt="8"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;进程控制&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>第八课</title>
    <link href="http://yoursite.com/2020/05/22/%E7%AC%AC%E5%85%AB%E8%AF%BE/"/>
    <id>http://yoursite.com/2020/05/22/%E7%AC%AC%E5%85%AB%E8%AF%BE/</id>
    <published>2020-05-22T08:56:22.411Z</published>
    <updated>2020-05-22T09:21:10.051Z</updated>
    
    <content type="html"><![CDATA[<p>进程的状态与转换</p><a id="more"></a><p><img src="/2020/05/22/%E7%AC%AC%E5%85%AB%E8%AF%BE/1.PNG" alt="1"></p><p><img src="/2020/05/22/%E7%AC%AC%E5%85%AB%E8%AF%BE/2.PNG" alt="2"></p><p><img src="/2020/05/22/%E7%AC%AC%E5%85%AB%E8%AF%BE/3.PNG" alt="3"></p><p><img src="/2020/05/22/%E7%AC%AC%E5%85%AB%E8%AF%BE/4.PNG" alt="4"></p><p><img src="/2020/05/22/%E7%AC%AC%E5%85%AB%E8%AF%BE/5.PNG" alt="5"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;进程的状态与转换&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>第七课</title>
    <link href="http://yoursite.com/2020/05/20/%E7%AC%AC%E4%B8%83%E8%AF%BE/"/>
    <id>http://yoursite.com/2020/05/20/%E7%AC%AC%E4%B8%83%E8%AF%BE/</id>
    <published>2020-05-20T07:48:28.822Z</published>
    <updated>2020-05-20T07:51:16.476Z</updated>
    
    <content type="html"><![CDATA[<p>进程</p><a id="more"></a><p><img src="/2020/05/20/%E7%AC%AC%E4%B8%83%E8%AF%BE/1.jpg" alt="1"></p><p><img src="/2020/05/20/%E7%AC%AC%E4%B8%83%E8%AF%BE/2.jpg" alt="2"></p><p><img src="/2020/05/20/%E7%AC%AC%E4%B8%83%E8%AF%BE/3.jpg" alt="3"></p><p><img src="/2020/05/20/%E7%AC%AC%E4%B8%83%E8%AF%BE/4.jpg" alt="4"></p><p><img src="/2020/05/20/%E7%AC%AC%E4%B8%83%E8%AF%BE/5.jpg" alt="5"></p><p><img src="/2020/05/20/%E7%AC%AC%E4%B8%83%E8%AF%BE/6.jpg" alt="6"></p><p><img src="/2020/05/20/%E7%AC%AC%E4%B8%83%E8%AF%BE/7.jpg" alt="7"></p><p><img src="/2020/05/20/%E7%AC%AC%E4%B8%83%E8%AF%BE/8.jpg" alt="8"></p><p><img src="/2020/05/20/%E7%AC%AC%E4%B8%83%E8%AF%BE/9.jpg" alt="9"></p><p><img src="/2020/05/20/%E7%AC%AC%E4%B8%83%E8%AF%BE/10.jpg" alt="10"></p><p><img src="/2020/05/20/%E7%AC%AC%E4%B8%83%E8%AF%BE/11.jpg" alt="11"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;进程&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>第六课</title>
    <link href="http://yoursite.com/2020/05/19/%E7%AC%AC%E5%85%AD%E8%AF%BE/"/>
    <id>http://yoursite.com/2020/05/19/%E7%AC%AC%E5%85%AD%E8%AF%BE/</id>
    <published>2020-05-19T09:57:16.793Z</published>
    <updated>2020-05-20T07:51:16.479Z</updated>
    
    <content type="html"><![CDATA[<p>YHJ</p><a id="more"></a><p><img src="/2020/05/19/%E7%AC%AC%E5%85%AD%E8%AF%BE/1.jpg" alt="1"></p><p><img src="/2020/05/19/%E7%AC%AC%E5%85%AD%E8%AF%BE/2.jpg" alt="2"></p><p><img src="/2020/05/19/%E7%AC%AC%E5%85%AD%E8%AF%BE/3.jpg" alt="3"></p><p><img src="/2020/05/19/%E7%AC%AC%E5%85%AD%E8%AF%BE/4.jpg" alt="4"></p><p><img src="/2020/05/19/%E7%AC%AC%E5%85%AD%E8%AF%BE/5.jpg" alt="5"></p><p><img src="/2020/05/19/%E7%AC%AC%E5%85%AD%E8%AF%BE/6.jpg" alt="6"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;YHJ&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>第五课</title>
    <link href="http://yoursite.com/2020/05/19/%E7%AC%AC%E4%BA%94%E8%AF%BE/"/>
    <id>http://yoursite.com/2020/05/19/%E7%AC%AC%E4%BA%94%E8%AF%BE/</id>
    <published>2020-05-19T09:48:27.941Z</published>
    <updated>2020-05-20T07:51:16.476Z</updated>
    
    <content type="html"><![CDATA[<p>中断和异常</p><a id="more"></a><p><img src="/2020/05/19/%E7%AC%AC%E4%BA%94%E8%AF%BE/1.jpg" alt="1"></p><p><img src="/2020/05/19/%E7%AC%AC%E4%BA%94%E8%AF%BE/2.jpg" alt="2"></p><p><img src="/2020/05/19/%E7%AC%AC%E4%BA%94%E8%AF%BE/3.jpg" alt="3"></p><p><img src="/2020/05/19/%E7%AC%AC%E4%BA%94%E8%AF%BE/4.jpg" alt="4"></p><p><img src="/2020/05/19/%E7%AC%AC%E4%BA%94%E8%AF%BE/5.jpg" alt="5"></p><p><img src="/2020/05/19/%E7%AC%AC%E4%BA%94%E8%AF%BE/6.jpg" alt="6"></p><p><img src="/2020/05/19/%E7%AC%AC%E4%BA%94%E8%AF%BE/7.jpg" alt="7"></p><p><img src="/2020/05/19/%E7%AC%AC%E4%BA%94%E8%AF%BE/8.jpg" alt="8"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;中断和异常&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>第四课</title>
    <link href="http://yoursite.com/2020/05/17/%E7%AC%AC%E5%9B%9B%E8%AF%BE/"/>
    <id>http://yoursite.com/2020/05/17/%E7%AC%AC%E5%9B%9B%E8%AF%BE/</id>
    <published>2020-05-17T15:06:16.013Z</published>
    <updated>2020-05-22T09:29:25.175Z</updated>
    
    <content type="html"><![CDATA[<p>  操作系统的运行机制和体系结构</p><a id="more"></a>  <p> <img src="/2020/05/17/%E7%AC%AC%E5%9B%9B%E8%AF%BE/1-1590139761909.PNG" alt="1"></p><p> 指令就是处理器（cpu）能识别、执行的最基本命令</p><p>  <img src="/2020/05/17/%E7%AC%AC%E5%9B%9B%E8%AF%BE/3.PNG" alt="3"></p><p>  两种处理器状态<br><img src="/2020/05/17/%E7%AC%AC%E5%9B%9B%E8%AF%BE/2.PNG" alt="2"></p><p><img src="/2020/05/17/%E7%AC%AC%E5%9B%9B%E8%AF%BE/4.PNG" alt="4"></p><p><img src="/2020/05/17/%E7%AC%AC%E5%9B%9B%E8%AF%BE/5.PNG" alt="5"><br>内核是计算机配置的底层软件，是操作系统最基本、最核心的部分<br>实现操作系统内核功能的那些程序就是内核程序。<br><img src="/2020/05/17/%E7%AC%AC%E5%9B%9B%E8%AF%BE/6.jpg" alt="6"></p><p><img src="/2020/05/17/%E7%AC%AC%E5%9B%9B%E8%AF%BE/7.jpg" alt="7"></p><p><img src="/2020/05/17/%E7%AC%AC%E5%9B%9B%E8%AF%BE/8.jpg" alt="8"></p><p><img src="/2020/05/17/%E7%AC%AC%E5%9B%9B%E8%AF%BE/9.jpg" alt="9"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  操作系统的运行机制和体系结构&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>第三课</title>
    <link href="http://yoursite.com/2020/05/16/%E7%AC%AC%E4%B8%89%E8%AF%BE/"/>
    <id>http://yoursite.com/2020/05/16/%E7%AC%AC%E4%B8%89%E8%AF%BE/</id>
    <published>2020-05-16T07:38:55.569Z</published>
    <updated>2020-05-17T15:02:40.825Z</updated>
    
    <content type="html"><![CDATA[<p>没经历我的磨难，就别劝我善良</p><a id="more"></a><p><img src="/2020/05/16/%E7%AC%AC%E4%B8%89%E8%AF%BE/1.PNG" alt="1"><br>手工操作阶段<br>        主要缺点:用户独占全机，人机速度矛盾导致资源率极低<br>单道批处理系统:引入脱机输入/输出技术(用磁带完成),并监督程序负责控制作业的输入输出<br>    主要优点:缓解了一定程度的人机速度矛盾，资源利用率有所提升。<br>        主要缺点:内存中仅有一道程序运行，只有该程序运行结束之后才能调入下一道程序。CPU有大量的时间是在空闲I/O完成。资源利用率依然很低。<br>多道批处理系统:<br>    主要优点:多道程序并发执行，共享计算机资源，资源利用率大幅提升，CPU和其它资源保持忙碌状态，系统吞吐量增大。<br>    主要缺点: 用户响应时间长，没有人机交互功能（用户提交自己的作业之后就只能等待计算机处理完成，中间不能控制自己的作业执行）<br>分时操作系统 :计算机以时间片为单位轮流为各个用户/作业服务，各个用户可通过终端与计算机进行交互。<br>    主要优点: 用户请求可以被及时响应，解决了人机交互问题。允许多个用户同时使用一台计算机，并且用户对计算机的操作相互独立，感受不到别人的存在<br>    主要缺点：不能优先处理一些紧急任务。操作系统对各个用户/作业都是完全公平的，循环的为每个用户/作业服务一个时间片，不区分任务的紧急性。<br>实时操作系统：<br>    主要优点:能够优先响应一些紧急任务，某些紧急任务 不需时间片排队。<br>    在实时操作系统的控制下，计算机系统收到外部信号后及时进行处理，并且要在严格的时限内处理完事件。实时操作系统的主要特点是及时性和可靠性</p><p><img src="/2020/05/16/%E7%AC%AC%E4%B8%89%E8%AF%BE/2.PNG" alt="2"><br><img src="/2020/05/16/%E7%AC%AC%E4%B8%89%E8%AF%BE/3-1589727606879.PNG" alt="3"></p><p><img src="/2020/05/16/%E7%AC%AC%E4%B8%89%E8%AF%BE/4.PNG" alt="4"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;没经历我的磨难，就别劝我善良&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>第二课</title>
    <link href="http://yoursite.com/2020/05/16/%E7%AC%AC%E4%BA%8C%E8%AF%BE/"/>
    <id>http://yoursite.com/2020/05/16/%E7%AC%AC%E4%BA%8C%E8%AF%BE/</id>
    <published>2020-05-16T06:45:36.100Z</published>
    <updated>2020-05-16T14:31:49.645Z</updated>
    
    <content type="html"><![CDATA[<p>时光荏苒，旦夕之间，略有遗憾，似白驹过隙，蹉跎自悟。</p><a id="more"></a><p><img src="/2020/05/16/%E7%AC%AC%E4%BA%8C%E8%AF%BE/1.PNG" alt="1"></p><p>并发:指两个或多个事件在同一时间间隔内发生。这些事件宏观上是同时发生的，但微观上是交替发生的。</p><p>并行:指两个或多个事件在同一时刻同时发生。</p><p>共享即资源共享，是指系统中的资源可供内存中多个并发执行的进程共同使用</p><p><img src="/2020/05/16/%E7%AC%AC%E4%BA%8C%E8%AF%BE/2.PNG" alt="2"></p><p>并发和共享互为存在条件</p><p>虚拟:指一个物理上的实体变为若干个逻辑上的对应物。物理实体是实际存在的，而逻辑上对应物是用户感受到的</p><p>虚拟存储器，空分复用技术</p><p>异步:指在多道程序环境下，允许多个程序并发执行，但由于资源有限，进程的执行不是一贯到底的，而是走走停停，以不可预知的速度向前推进，这就是进程的异步性。</p><p><img src="/2020/05/16/%E7%AC%AC%E4%BA%8C%E8%AF%BE/3.PNG" alt="3"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;时光荏苒，旦夕之间，略有遗憾，似白驹过隙，蹉跎自悟。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>第一课</title>
    <link href="http://yoursite.com/2020/05/15/%E7%AC%AC%E4%B8%80%E8%AF%BE/"/>
    <id>http://yoursite.com/2020/05/15/%E7%AC%AC%E4%B8%80%E8%AF%BE/</id>
    <published>2020-05-15T08:08:30.408Z</published>
    <updated>2020-05-26T10:50:59.874Z</updated>
    
    <content type="html"><![CDATA[<p>​                               操作系统的概念</p><p>   操作系统是指控制和管理整个计算机系统的硬件和软件资源，并合理的组织调度计算机的工作和资源的分配，<br>   以提供给用户和其他软件方便的接口和环境，它是计算机系统中最基本的系统软件。</p><a id="more"></a><p><img src="/2020/05/15/%E7%AC%AC%E4%B8%80%E8%AF%BE/1.PNG" alt="1"></p><p>​                         操作系统的功能和目标<br>进程是一个程序的执行过程。执行前需要将该程序放到内存中，才能被cpu处理。</p><p><img src="/2020/05/15/%E7%AC%AC%E4%B8%80%E8%AF%BE/2.PNG" alt="2"></p><p><img src="/2020/05/15/%E7%AC%AC%E4%B8%80%E8%AF%BE/3.PNG" alt="3"></p><p><img src="/2020/05/15/%E7%AC%AC%E4%B8%80%E8%AF%BE/4.PNG" alt="4"></p><p><img src="/2020/05/15/%E7%AC%AC%E4%B8%80%E8%AF%BE/5.PNG" alt="5"><br>广义指令=系统调用命令=广义指令<br><img src="/2020/05/15/%E7%AC%AC%E4%B8%80%E8%AF%BE/6.PNG" alt="6"><br><img src="/2020/05/15/%E7%AC%AC%E4%B8%80%E8%AF%BE/7.PNG" alt="7"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​                               操作系统的概念&lt;/p&gt;
&lt;p&gt;   操作系统是指控制和管理整个计算机系统的硬件和软件资源，并合理的组织调度计算机的工作和资源的分配，&lt;br&gt;   以提供给用户和其他软件方便的接口和环境，它是计算机系统中最基本的系统软件。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
